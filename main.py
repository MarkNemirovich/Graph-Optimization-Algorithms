import networkx as nx # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–æ–≤ –∏ —Ä–∞–±–æ—Ç—ã —Å –∏—Ö —É–∑–ª–∞–º–∏ –∏ —Ä—ë–±—Ä–∞–º–∏.
import random
from math import e
from sympy import symbols, diff # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–∏–º–≤–æ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ ùê∏(ùëÑ)E(Q).
import time # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
import matplotlib.pyplot as plt # –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≥—Ä–∞—Ñ–æ–≤ –∏ –ø–æ—Ç–æ–∫–æ–≤).

# –°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ —Å —É–∑–ª–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ (–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã, —Ä–æ–∑–Ω–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏)
# –∏ —Ä—ë–±—Ä–∞–º–∏ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ—Ç–æ–∫–∞ (flow = 0).
def create_graph(suppliers_nodes_list, dc_nodes_list, retail_nodes_list, edgelist):
    G = nx.Graph()
    G.add_nodes_from(suppliers_nodes_list, type='supplier')
    G.add_nodes_from(dc_nodes_list, type='dc')
    G.add_nodes_from(retail_nodes_list, type='retail')
    G.add_edges_from(edgelist, flow=0)
    return G

# –°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–≥—Ä–∞—Ñ—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–Ω—Ç—Ä–∞–º–∏ –∏ —Ä–æ–∑–Ω–∏—á–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏,
# –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ä—ë–±–µ—Ä –∏ —É–∑–ª–æ–≤.
def create_subgraphs(G, demand_data):
    graphs = []
    dc_and_retail = []
    suppliers = []
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –ø–æ —Ç–∏–ø—É:
    # –£–∑–ª—ã —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º 'dc' –∏–ª–∏ 'retail' –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ dc_and_retail,
    # –∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ (–ø–æ—Å—Ç–∞–≤—â–∏–∫–∏) ‚Äî –≤ —Å–ø–∏—Å–æ–∫ suppliers.
    for node, atr in G.nodes(data='type'):
        if atr in ('dc', 'retail'):
            dc_and_retail.append(node)
        else:
            suppliers.append(node)
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø–æ–¥–≥—Ä–∞—Ñ g,
    # –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –≤—Å–µ—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –∏ —Ä–æ–∑–Ω–∏—á–Ω—ã—Ö —Ç–æ—á–µ–∫.
    for supplier in suppliers:
        g = nx.subgraph(G, [supplier] + dc_and_retail).copy()
        g.graph["s_id"] = supplier
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫ —É–∑–ª–∞–º –∏ —Ä—ë–±—Ä–∞–º:
        # –î–ª—è —É–∑–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞—Ç—Ä–∏–±—É—Ç demand, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è demand_data.
        # –≠—Ç–æ—Ç –∞—Ç—Ä–∏–±—É—Ç —Ö—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–æ—Å–µ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—Ä–∞ –≤ –ø–æ–¥–≥—Ä–∞—Ñ–µ:        #
        # –ê—Ç—Ä–∏–±—É—Ç flow —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ä–∞–≤–Ω—ã–º 0 (–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫).        #
        # –ê—Ç—Ä–∏–±—É—Ç conductivity —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º —á–∏—Å–ª–æ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 1√ó10-6 –¥–æ 1,
        # —á—Ç–æ –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–±—Ä–∞ (—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ—Ç–æ–∫).
        # –ê—Ç—Ä–∏–±—É—Ç prev_conductivity –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω—É–ª—ë–º
        # (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏).
        #  –ê—Ç—Ä–∏–±—É—Ç length —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ä–∞–≤–Ω—ã–º 1, —á—Ç–æ –º–æ–∂–µ—Ç –æ–±–æ–∑–Ω–∞—á–∞—Ç—å –µ–¥–∏–Ω–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ä—ë–±–µ—Ä.
        g.nodes[supplier]['demand'] = demand_data[supplier]
        for i, j in g.edges:
            g.edges[i, j]['flow'] = 0
            g.edges[i, j]['conductivity'] = random.uniform(1e-6, 1)
            g.edges[i, j]['prev_conductivity'] = 0
            g.edges[i, j]['length'] = 1
        # –î–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤ –≤ –ø–æ–¥–≥—Ä–∞—Ñ–µ (–≤–∫–ª—é—á–∞—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ —Ä–æ–∑–Ω–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏)
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–≤–Ω—ã–º 0.
        # –≠—Ç–æ –¥–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ.
        for node in g.nodes:
            g.nodes[node]['pressure'] = 0
        graphs.append(g)
    return graphs

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º —É–∑–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–µ–π –∏ —Å–ø—Ä–æ—Å–∞ (–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä.
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–∞–≤–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π —É—Ä–∞–≤–Ω–µ–Ω–∏—é –ü—É–∞—Å—Å–æ–Ω–∞,
# –≥–¥–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–≤—è–∑–µ–π —Å —Å–æ—Å–µ–¥—è–º–∏ –∏ —Å–ø—Ä–æ—Å–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
def calculate_node_pressures(g):
    # –ü–µ—Ä–µ–±–æ—Ä —É–∑–ª–æ–≤ –≤ –ø–æ–¥–≥—Ä–∞—Ñ–µ g: node: —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª.
    # type - —Ç–∏–ø —É–∑–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, supplier, retail –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, dc ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã).
    for node, type in g.nodes(data='type'):
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤—ã–π —á–ª–µ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –¥–∞–≤–ª–µ–Ω–∏—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–∑–ª–∞:
        # –°–ø—Ä–æ—Å –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä–µ demand –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞.
        # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å, —á—Ç–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏–º–µ–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ (–æ–Ω –æ—Ç–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä).
        # –î–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –ø—Ä–∞–≤—ã–π —á–ª–µ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Å–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—á–∫–∏.
        if type == 'supplier':
            equation_right = -sum(g.nodes[node]['demand'].values())
        elif type == 'retail':
            equation_right = g.nodes[g.graph['s_id']]['demand'][node]
        else:
            equation_right = 0
        numerator = 0
        denominator = 0
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å–µ–¥–∞:
        # –ß–∏—Å–ª–∏—Ç–µ–ª—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å—É–º–º–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–±—Ä–∞,
        # –¥–µ–ª—ë–Ω–Ω–æ–π –Ω–∞ –¥–ª–∏–Ω—É —Ä–µ–±—Ä–∞, –∏ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–æ—Å–µ–¥–Ω–µ–º —É–∑–ª–µ:
        # –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä, –¥–µ–ª—ë–Ω–Ω–æ–π –Ω–∞ –∏—Ö –¥–ª–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π:
        for neighbour, data in g[node].items():
            numerator += data['conductivity'] / data['length'] * g.nodes[neighbour]['pressure']
            denominator += data['conductivity'] / data['length']
        # –î–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–∑–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—è –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è.
        # –≠—Ç–æ –¥–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π, –∞ —Ç–∞–∫–∂–µ –æ—Ç —Å–ø—Ä–æ—Å–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,
        # –µ—Å–ª–∏ —É–∑–µ–ª —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏–ª–∏ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—á–∫–æ–π.
        g.nodes[node]['pressure'] = (numerator - equation_right) / denominator

# –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä—ë–±–µ—Ä –≥—Ä–∞—Ñ–∞.
# –ü–æ—Ç–æ–∫ –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω —Ä–∞–∑–Ω–æ—Å—Ç–∏ –∏—Ö –¥–∞–≤–ª–µ–Ω–∏–π,
# –∞ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä—ë–±–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞.
def update_flow_and_conductivity(g):
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ä—ë–±—Ä–∞ –≤ –≥—Ä–∞—Ñ–µ g, –≥–¥–µ i –∏ j ‚Äî —ç—Ç–æ —É–∑–ª—ã (–∫–æ–Ω—Ü—ã —Ä–µ–±—Ä–∞), –∞ data ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ —Ä—ë–±–µ—Ä.
    # –ê—Ç—Ä–∏–±—É—Ç—ã —Ä—ë–±–µ—Ä –≤–∫–ª—é—á–∞—é—Ç —Ç–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–∞–∫ flow, conductivity, length –∏ –¥—Ä—É–≥–∏–µ.
    for i, j, data in g.edges.data():
        # –ü–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ —Ä–µ–±—Ä–æ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ ùëñ –∏ ùëó —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω–∏—Ü—ã –∏—Ö –¥–∞–≤–ª–µ–Ω–∏–π:
        # –î–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–ª–∞—Ö —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ä–∞–Ω–µ–µ, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ calculate_node_pressures.
        # –ì–¥–µ: conductivity ‚Äî –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä—ë–±–µ—Ä, –∫–æ—Ç–æ—Ä–∞—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ—Ç–æ–∫,
        # length ‚Äî –¥–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä–æ–π –¥–ª—è "—Å—Ç–æ–∏–º–æ—Å—Ç–∏" –∏–ª–∏ "—É–¥–æ–±—Å—Ç–≤–∞" –ø—É—Ç–∏,
        # pressure_i –∏ pressure_j ‚Äî –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–ª–∞—Ö ùëñ –∏ ùëó, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —ç—Ç–∏–º —Ä–µ–±—Ä–æ–º.
        g.edges[i, j]['flow'] = data['conductivity'] / data['length'] * (g.nodes[i]['pressure'] - g.nodes[j]['pressure'])
    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ—Ç–æ–∫ –±—ã–ª –æ–±–Ω–æ–≤–ª—ë–Ω, –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä—ë–±–µ—Ä —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è:
    # prev_conductivity —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏.
    # –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä.
    # conductivity –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å—é –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–∞:
    # –≠—Ç–æ –º–æ–¥–µ–ª–∏—Ä—É–µ—Ç —É—Å–∏–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä—ë–±–µ—Ä, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∏–π –ø–æ—Ç–æ–∫,
    # –∏ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä—ë–±–µ—Ä —Å –º–∞–ª—ã–º –ø–æ—Ç–æ–∫–æ–º. –ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Ä—ë–±—Ä–∞,
    # —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—á–µ—Ç –±–æ–ª—å—à–µ –≤–µ—â–µ—Å—Ç–≤–∞ (–∏–ª–∏ –ø–æ—Ç–æ–∫–∞), —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è "–ª–µ–≥—á–µ" –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º,
    # –∞ —Ç–µ, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–∫ –º–∞–ª, —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è "—Ç—Ä—É–¥–Ω–µ–µ".
    for i, j, data in g.edges.data():
        g.edges[i, j]['prev_conductivity'] = data['conductivity']
        g.edges[i, j]['conductivity'] = (data['conductivity'] + abs(data['flow'])) / 2

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –ø–æ—Ç–æ–∫ –ø–æ –≤—Å–µ–º—É –≥—Ä–∞—Ñ—É, —Å—É–º–º–∏—Ä—É—è –ø–æ—Ç–æ–∫–∏, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤.
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–≥–æ –≥—Ä–∞—Ñ–∞ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
def calculate_total_flow(G, graphs):
    # –≠—Ç–æ—Ç —à–∞–≥ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ä—ë–±–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥—Ä–∞—Ñ–µ ùê∫.
    # –í–Ω–∞—á–∞–ª–µ –ø–æ—Ç–æ–∫–∏ –Ω–∞ —Ä—ë–±—Ä–∞—Ö —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ 0,
    # —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–µ—Å—á—ë—Ç –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ.
    for edge in G.edges:
        G.edges[edge]['flow'] = 0
    # –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–≥—Ä–∞—Ñ—É:
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–≥—Ä–∞—Ñ–∞ –ø–µ—Ä–µ–±–∏—Ä–∞—é—Ç—Å—è —Ä—ë–±—Ä–∞ –∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –ø–æ—Ç–æ–∫–∏.
    # –í g.edges.data('flow') –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä—ë–±–µ—Ä –≤ –ø–æ–¥–≥—Ä–∞—Ñ–µ —Å –∏—Ö –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏,
    # –∏ –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ—Ç–æ–∫–∞, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –≤ –∞—Ç—Ä–∏–±—É—Ç–µ 'flow'.
    for g in graphs:
        for i, j, flow in g.edges.data('flow'):
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±—Ä–∞ –≤ –ø–æ–¥–≥—Ä–∞—Ñ–µ –ø–æ—Ç–æ–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Ä–µ–±—Ä—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥—Ä–∞—Ñ–µ ùê∫ —Å –ø–æ–º–æ—â—å—é:
            G.edges[i, j]['flow'] += flow


# –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–ª–∏–Ω—É —Ä—ë–±–µ—Ä —Å —É—á—ë—Ç–æ–º –ø–æ—Ç–æ–∫–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è E(Q).
# –§—É–Ω–∫—Ü–∏—è E(Q) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å —É—á—ë—Ç–æ–º –ø–æ—Ç–æ–∫–∞, –∞ –µ—ë –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–ª–∏–Ω–µ —Ä—ë–±–µ—Ä.
def update_edge_length(G, g, E):
    # –°–æ–∑–¥–∞—ë–º —Å–∏–º–≤–æ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Q –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ E(Q), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
    Q = symbols('Q')
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ E(Q) –ø–æ Q. –≠—Ç–æ –¥–∞—Å—Ç –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è E(Q) –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞ (Q). –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ä—ë–±–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ç–æ–∫–∞.
    dE = diff(E(Q), Q)
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä—ë–±—Ä–∞ –ø–æ–¥–≥—Ä–∞—Ñ–∞ g
    for i, j, data in g.edges.data():
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏–Ω—É —Ä—ë–±–µ—Ä —Å —É—á—ë—Ç–æ–º –ø–æ—Ç–æ–∫–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è E(Q).
        # data['length'] ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.
        # E(G.edges[i, j]['flow']) ‚Äî —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–∞ —Ä–µ–±—Ä–µ (i, j).
        # data['flow'] * dE.subs(Q, G.edges[i, j]['flow']) ‚Äî —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª–∏–Ω—ã —Ä–µ–±—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞,
        # –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ E(Q), –∫–æ—Ç–æ—Ä–∞—è —É—á–∏—Ç—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–ª–∏–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ—Ç–æ–∫–∞.
        # –í –∫–æ–Ω—Ü–µ –≤—Å—ë —É—Å—Ä–µ–¥–Ω—è–µ—Ç—Å—è –¥–ª—è –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏–Ω—ã.
        g.edges[i, j]['length'] = (data['length'] + E(G.edges[i, j]['flow']) + data['flow'] * dE.subs(Q, G.edges[i, j][
            'flow'])) / 2

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ä–∞–∑–Ω–∏—Ü–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å—é —Ä—ë–±–µ—Ä.
# –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –∏ –¥–æ—Å—Ç–∏–≥ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
def calculate_term_criteria(graphs):
    total_diff = 0
    for g in graphs:
        # g.edges.data() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä—ë–±–µ—Ä –≤ –ø–æ–¥–≥—Ä–∞—Ñ–µ g —Å –∏—Ö –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏.
        # –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ—Ä—Ç–µ–∂ (i, j, data), –≥–¥–µ:
        # i –∏ j ‚Äî —ç—Ç–æ —É–∑–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–±—Ä–æ.
        # data ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –¥–ª—è —Ä—ë–±–µ—Ä: 'conductivity' (–ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å) –∏ 'prev_conductivity' (–ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å).
        for i, j, data in g.edges.data():
            total_diff += abs(data['conductivity'] - data['prev_conductivity'])
    return total_diff

# –†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Å–ª–∏–∑–µ–≤–∏–∫–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤.
# –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–ª–∞—Ö,
# –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä, –∞ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–ª–∏–Ω—ã —Ä—ë–±–µ—Ä.
def physarum_algorithm(G, demand_data, effective_distance_function, epsilon, get_subgraphs=False):
    graphs = create_subgraphs(G, demand_data)
    termination_criteria_met = False
    while not termination_criteria_met:
        for graph in graphs: # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–≥—Ä–∞—Ñ–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–ª–∞—Ö –∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ —Ä–µ–±—Ä–∞
            calculate_node_pressures(graph)
            update_flow_and_conductivity(graph)
        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç–æ–∫–∏ —á–µ—Ä–µ–∑ —Ä–µ–±—Ä–∞ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∞
        calculate_total_flow(G, graphs)
        for graph in graphs:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –¥–ª–∏–Ω—ã —Ä–µ–±–µ—Ä
            update_edge_length(G, graph, effective_distance_function)
        termination_criteria_met = calculate_term_criteria(graphs) <= epsilon # —É—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if get_subgraphs:
        return graphs

# –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≥–¥–µ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≥—Ä–∞—Ñ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º —Å–ª–∏–∑–µ–≤–∏–∫–∞ –∏ –∑–∞–º–µ—Ä—è–µ—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ—Ç–æ–∫–∏ –Ω–∞ —Ä—ë–±—Ä–∞—Ö) –∏ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Ö.
if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞
    #random.seed(42)

    # Graph from first Instance

    # suppliers_nodes_list = [1, 2, 3]
    # dc_nodes_list = [4, 5]
    # retail_nodes_list = [6, 7]
    # edgelist = [(1, 4), (1, 5), (2, 4), (2, 5), (3, 5), (4, 6), (4, 7), (5, 7), (5, 6)]
    # demand_data = {1 : {6 : 2, 7 : 1},
    #                2 : {6 : 1, 7 : 1},
    #                3 : {6 : 0, 7 : 8}}
    # effective_distance_func = lambda Q : 5 + 3 * e ** (-0.3 * Q)
    # EPSILON = 0.01



    # Graph from second Instance

    # –ù–æ–¥—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    suppliers_nodes_list = [1, 2, 3]
    # –ù–æ–¥—ã —Å–∫–ª–∞–¥–æ–≤
    dc_nodes_list = [4, 5, 6, 7, 8, 9]
    # –ù–æ–¥—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤
    retail_nodes_list = [10, 11, 12]
    # –†–µ–±—Ä–∞ –≥—Ä–∞—Ñ–∞
    edgelist = [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (3, 5), (3, 9), (4, 7), (5, 6), (5, 7), (5, 8), (5, 9), (6, 10), (6, 11), (7, 10), (7, 11), (8, 12), (9, 11), (9, 12)]
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö Dictionary<int, Dictionary<int, init>>
    demand_data = {1 : {10 : 5, 11 : 12, 12 : 3},
                   2 : {10 : 8, 11 : 2, 12 : 6},
                   3 : {10 : 6, 11 : 6, 12: 12}}
    # –ê–Ω–æ–Ω–∏–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 1 –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ –≤—Ö–æ–¥ Q (** - –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å)
    effective_distance_func = lambda Q : 5 + 3 * e ** (-0.3 * Q)
    EPSILON = 1e-2

    start_time = time.time()
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
    G = create_graph(suppliers_nodes_list, dc_nodes_list, retail_nodes_list, edgelist)
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥—Ä–∞—Ñ–∞ –∏ —Å–ª–æ–≤–∞—Ä—è —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ —Ç–∞–∫–∂–µ —Å –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    graphs = physarum_algorithm(G, demand_data, effective_distance_func, EPSILON, get_subgraphs=True)
    end_time = time.time()
    print(f"Time of executing is {end_time - start_time}")

# –ü–µ—Ä–µ–±–æ—Ä –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤ (graphs):
    # graphs ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤,
    # –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—É—é —Å–µ—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
    # –ö–∞–∂–¥—ã–π —Ç–∞–∫–æ–π –ø–æ–¥–≥—Ä–∞—Ñ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç 's_id', –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞,
    # —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç—Ç–∏–º –ø–æ–¥–≥—Ä–∞—Ñ–æ–º.
    # g.graph['s_id']: –≤—ã–≤–æ–¥–∏—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–≥—Ä–∞—Ñ–∞ g.
    # –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –¥–ª—è –∫–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥–≥—Ä–∞—Ñ.
    # g.edges.data('flow') –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä—ë–±–µ—Ä —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏.
    # flow ‚Äî —ç—Ç–æ –∞—Ç—Ä–∏–±—É—Ç —Ä—ë–±–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –ø–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω–æ–µ —Ä–µ–±—Ä–æ.
    # lambda x: x[2]: –≤ —Ä—ë–±—Ä–∞—Ö —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–∏–¥–∞ (u, v, data),
    # –≥–¥–µ u, v ‚Äî —ç—Ç–æ —É–∑–ª—ã, –∞ data ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'flow', 'conductivity' –∏ —Ç.–¥.).
    # –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, x[2] –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º —Ä—ë–±–µ—Ä –∏ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ (flow).
    for g in graphs:
        print(f"Subnetwork = {g.graph['s_id']}")
        print(sorted(g.edges.data('flow'), key=lambda x: x[2], reverse=True))
    # –í—ã–≤–æ–¥ —Ä—ë–±–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞ G
    print(sorted(G.edges.data('flow'), key=lambda x: x[2], reverse=True))
    edges_dr = []
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä—ë–±–µ—Ä –ø–æ –ø–æ—Ç–æ–∫—É
    # for u, v, flow in G.edges.data('flow') ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ä—ë–±—Ä–∞ –≤ –≥—Ä–∞—Ñ–µ G,
    # –≥–¥–µ u –∏ v ‚Äî —ç—Ç–æ —É–∑–ª—ã —Ä—ë–±–µ—Ä, –∞ flow ‚Äî —ç—Ç–æ –ø–æ—Ç–æ–∫ –≤ –¥–∞–Ω–Ω–æ–º —Ä–µ–±—Ä–µ.
    # effective_distance_func(flow) ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä—ë–±—Ä–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ,
    # –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é effective_distance_func.
    # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ—Ç–æ–∫ flow –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    # –µ—Å–ª–∏ –ø–æ—Ç–æ–∫ –≤ —Ä–µ–±—Ä–µ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 1, —Ç–æ —ç—Ç–æ —Ä–µ–±—Ä–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ edges_dr.
    for u, v, flow in G.edges.data('flow'):
        print(f"link: {u, v}, ed = {effective_distance_func(flow)}")
        if flow >= 1: edges_dr.append((u,v))
    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–≥—Ä–∞—Ñ —Å —Ä—ë–±—Ä–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Ç–æ–∫ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 1, –∏—Å–ø–æ–ª—å–∑—É—è –±–∏–±–ª–∏–æ—Ç–µ–∫—É matplotlib
    nx.draw_planar(nx.edge_subgraph(G, edges_dr), with_labels=True, font_weight='bold')
    plt.show()