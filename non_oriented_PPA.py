from sympy import symbols, diff, lambdify 
from non_oriented_graph import create_subgraphs

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º —É–∑–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–µ–π –∏ —Å–ø—Ä–æ—Å–∞ (–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä.
# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –¥–∞–≤–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π —É—Ä–∞–≤–Ω–µ–Ω–∏—é –ü—É–∞—Å—Å–æ–Ω–∞,
# –≥–¥–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–≤—è–∑–µ–π —Å —Å–æ—Å–µ–¥—è–º–∏ –∏ —Å–ø—Ä–æ—Å–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
def calculate_node_pressures(g):
    # –ü–µ—Ä–µ–±–æ—Ä —É–∑–ª–æ–≤ –≤ –ø–æ–¥–≥—Ä–∞—Ñ–µ g: node: —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª.
    # type - —Ç–∏–ø —É–∑–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, supplier, retail –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, dc ‚Äî —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã).
    for node, type in g.nodes(data='type'):
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤—ã–π —á–ª–µ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –¥–∞–≤–ª–µ–Ω–∏—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–∑–ª–∞:
        # –°–ø—Ä–æ—Å –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å–ª–æ–≤–∞—Ä–µ demand –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞.
        # –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å, —á—Ç–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –∏–º–µ–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ (–æ–Ω –æ—Ç–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä).
        # –î–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—á–∫–∏ –ø—Ä–∞–≤—ã–π —á–ª–µ–Ω —É—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Äî —ç—Ç–æ —Å–ø—Ä–æ—Å –Ω–∞ —Ç–æ–≤–∞—Ä –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–≥–æ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—á–∫–∏.
        if type == 'supplier':
            equation_right = -sum(g.nodes[node]['demand'].values())
        elif type == 'retail':
            equation_right = g.nodes[g.graph['s_id']]['demand'][node]
        else:
            equation_right = 0
        numerator = 0
        denominator = 0
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å–µ–¥–∞:
        # –ß–∏—Å–ª–∏—Ç–µ–ª—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å—É–º–º–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–±—Ä–∞,
        # –¥–µ–ª—ë–Ω–Ω–æ–π –Ω–∞ –¥–ª–∏–Ω—É —Ä–µ–±—Ä–∞, –∏ –¥–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–æ—Å–µ–¥–Ω–µ–º —É–∑–ª–µ:
        # –ó–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä, –¥–µ–ª—ë–Ω–Ω–æ–π –Ω–∞ –∏—Ö –¥–ª–∏–Ω—É –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π:
        for neighbour, data in g[node].items():
            numerator += data['conductivity'] / data['length'] * g.nodes[neighbour]['pressure']
            denominator += data['conductivity'] / data['length']
        # –î–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–∑–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—è –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è.
        # –≠—Ç–æ –¥–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å–µ–¥–µ–π, –∞ —Ç–∞–∫–∂–µ –æ—Ç —Å–ø—Ä–æ—Å–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è,
        # –µ—Å–ª–∏ —É–∑–µ–ª —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –∏–ª–∏ —Ä–æ–∑–Ω–∏—á–Ω–æ–π —Ç–æ—á–∫–æ–π.
        g.nodes[node]['pressure'] = (numerator - equation_right) / denominator

# –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä—ë–±–µ—Ä –≥—Ä–∞—Ñ–∞.
# –ü–æ—Ç–æ–∫ –º–µ–∂–¥—É –¥–≤—É–º—è —É–∑–ª–∞–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω —Ä–∞–∑–Ω–æ—Å—Ç–∏ –∏—Ö –¥–∞–≤–ª–µ–Ω–∏–π,
# –∞ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä—ë–±–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞.
def update_flow_and_conductivity(g):
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ä—ë–±—Ä–∞ –≤ –≥—Ä–∞—Ñ–µ g, –≥–¥–µ i –∏ j ‚Äî —ç—Ç–æ —É–∑–ª—ã (–∫–æ–Ω—Ü—ã —Ä–µ–±—Ä–∞), –∞ data ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ —Ä—ë–±–µ—Ä.
    for i, j, data in g.edges.data():
        # –ü–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ —Ä–µ–±—Ä–æ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ ùëñ –∏ ùëó —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω–∏—Ü—ã –∏—Ö –¥–∞–≤–ª–µ–Ω–∏–π:
        # –ì–¥–µ: conductivity ‚Äî –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å —Ä—ë–±–µ—Ä, –∫–æ—Ç–æ—Ä–∞—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ—Ç–æ–∫,
        # length ‚Äî –¥–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä–æ–π –¥–ª—è "—Å—Ç–æ–∏–º–æ—Å—Ç–∏" –∏–ª–∏ "—É–¥–æ–±—Å—Ç–≤–∞" –ø—É—Ç–∏,
        # pressure_i –∏ pressure_j ‚Äî –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–ª–∞—Ö ùëñ –∏ ùëó, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —ç—Ç–∏–º —Ä–µ–±—Ä–æ–º.
        pressure_diff = g.nodes[i]['pressure'] - g.nodes[j]['pressure']
        flow = data['conductivity'] / data['length'] * pressure_diff
        g.edges[i, j]['flow'] = flow
        prev = data['conductivity']
        g.edges[i, j]['prev_conductivity'] = prev
        g.edges[i, j]['conductivity'] = (prev + abs(flow)) / 2

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –ø–æ—Ç–æ–∫ –ø–æ –≤—Å–µ–º—É –≥—Ä–∞—Ñ—É, —Å—É–º–º–∏—Ä—É—è –ø–æ—Ç–æ–∫–∏, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–¥–≥—Ä–∞—Ñ–æ–≤.
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—Å–µ–≥–æ –≥—Ä–∞—Ñ–∞ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
def calculate_total_flow(G, graphs):
    for edge in G.edges:
        G.edges[edge]['flow'] = 0
    for g in graphs:
        for i, j, flow in g.edges.data('flow'):
            if flow > 0:
                G.edges[i, j]['flow'] += flow


# –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–ª–∏–Ω—É —Ä—ë–±–µ—Ä —Å —É—á—ë—Ç–æ–º –ø–æ—Ç–æ–∫–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è E(Q).
def update_edge_length(G, g, E_func, dE_func):
    for i, j, data in g.edges.data():
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏–Ω—É —Ä—ë–±–µ—Ä —Å —É—á—ë—Ç–æ–º –ø–æ—Ç–æ–∫–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è E(Q).
        # data['length'] ‚Äî —ç—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ä–µ–±—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞.
        # E(G.edges[i, j]['flow']) ‚Äî —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–∞ —Ä–µ–±—Ä–µ (i, j).
        # data['flow'] * dE.subs(Q, G.edges[i, j]['flow']) ‚Äî —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª–∏–Ω—ã —Ä–µ–±—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞,
        # –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ E(Q), –∫–æ—Ç–æ—Ä–∞—è —É—á–∏—Ç—ã–≤–∞–µ—Ç, –∫–∞–∫ –¥–ª–∏–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ—Ç–æ–∫–∞.
        flow = G.edges[i, j]['flow']
        g.edges[i, j]['length'] = (data['length'] + E_func(flow) + data['flow'] * dE_func(flow)) / 2

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ä–∞–∑–Ω–∏—Ü–µ –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç—å—é —Ä—ë–±–µ—Ä.
def calculate_term_criteria(graphs):
    total_diff = 0
    total_diff = sum(
    abs(data['conductivity'] - data['prev_conductivity'])
    for g in graphs for _, _, data in g.edges(data=True)
)
    return total_diff

# –ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Ç–µ—Ä–∞—Ü–∏–π, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–ª–∞—Ö,
# –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—ë–±–µ—Ä, –∞ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–ª–∏–Ω—ã —Ä—ë–±–µ—Ä.
def physarum_algorithm(G, demand_data, effective_distance_function, epsilon):
    graphs = create_subgraphs(G, demand_data)
    # –°–æ–∑–¥–∞—ë–º —Å–∏–º–≤–æ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é Q –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ E(Q), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
    # –§—É–Ω–∫—Ü–∏—è E(Q) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å —É—á—ë—Ç–æ–º –ø–æ—Ç–æ–∫–∞, –∞ –µ—ë –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ–º–æ–≥–∞–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–ª–∏–Ω–µ —Ä—ë–±–µ—Ä.
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–∏ E(Q) –ø–æ Q. –≠—Ç–æ –¥–∞—Å—Ç –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è E(Q) –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    # –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞ (Q). –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ä—ë–±–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ç–æ–∫–∞.
    Q = symbols('Q')
    E_sym  = effective_distance_function(Q)
    dE_sym = diff(E_sym, Q)
    # lambdify ‚Üí –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –±—ã—Å—Ç—Ä—ã–µ NumPy-—Ñ—É–Ω–∫—Ü–∏–∏
    E_func  = lambdify(Q, E_sym,  'numpy')
    dE_func = lambdify(Q, dE_sym, 'numpy')
    while True:
        for g in graphs:
            calculate_node_pressures(g)
            update_flow_and_conductivity(g)

        calculate_total_flow(G, graphs)

        for g in graphs:
            update_edge_length(G, g, E_func, dE_func)

        if calculate_term_criteria(graphs) <= epsilon:
            break

    return G